USE master;
GO

USE FoodDeliveryDB;
GO

-- Удаление существующих таблиц, если они есть
IF OBJECT_ID('ЗаказыБлюда', 'U') IS NOT NULL DROP TABLE ЗаказыБлюда;
IF OBJECT_ID('Заказы', 'U') IS NOT NULL DROP TABLE Заказы;
IF OBJECT_ID('Курьеры', 'U') IS NOT NULL DROP TABLE Курьеры;
IF OBJECT_ID('Клиенты', 'U') IS NOT NULL DROP TABLE Клиенты;
IF OBJECT_ID('Блюда', 'U') IS NOT NULL DROP TABLE Блюда;
IF OBJECT_ID('Рестораны', 'U') IS NOT NULL DROP TABLE Рестораны;
GO

-- Создание таблицы Рестораны
CREATE TABLE Рестораны (
    РесторанID INT IDENTITY(1,1) PRIMARY KEY,
    Название NVARCHAR(100) NOT NULL,
    Адрес NVARCHAR(255) NOT NULL,
    Телефон NVARCHAR(20) NOT NULL,
    Рейтинг DECIMAL(3,1) CHECK (Рейтинг BETWEEN 0 AND 5),
    Кухня NVARCHAR(100) NOT NULL,
    ВремяРаботы NVARCHAR(100) NOT NULL
);
GO

-- Создание таблицы Блюда
CREATE TABLE Блюда (
    БлюдоID INT IDENTITY(1,1) PRIMARY KEY,
    Название NVARCHAR(100) NOT NULL,
    Описание NVARCHAR(500),
    Цена DECIMAL(10,2) NOT NULL CHECK (Цена > 0),
    Вес INT,
    РесторанID INT NOT NULL,
    Категория NVARCHAR(50) NOT NULL,
    FOREIGN KEY (РесторанID) REFERENCES Рестораны(РесторанID)
);
GO

-- Создание таблицы Клиенты
CREATE TABLE Клиенты (
    КлиентID INT IDENTITY(1,1) PRIMARY KEY,
    Имя NVARCHAR(50) NOT NULL,
    Фамилия NVARCHAR(50) NOT NULL,
    Телефон NVARCHAR(20) NOT NULL UNIQUE,
    Email NVARCHAR(100) UNIQUE,
    Адрес NVARCHAR(255) NOT NULL,
    ДатаРегистрации DATETIME DEFAULT GETDATE()
);
GO

-- Создание таблицы Курьеры
CREATE TABLE Курьеры (
    КурьерID INT IDENTITY(1,1) PRIMARY KEY,
    Имя NVARCHAR(50) NOT NULL,
    Фамилия NVARCHAR(50) NOT NULL,
    Телефон NVARCHAR(20) NOT NULL UNIQUE,
    Транспорт NVARCHAR(50) NOT NULL,
    Статус NVARCHAR(20) DEFAULT 'Свободен' CHECK (Статус IN ('Свободен', 'Занят', 'На смене')),
    Рейтинг DECIMAL(3,1) CHECK (Рейтинг BETWEEN 0 AND 5)
);
GO

-- Создание таблицы Заказы
CREATE TABLE Заказы (
    ЗаказID INT IDENTITY(1,1) PRIMARY KEY,
    КлиентID INT NOT NULL,
    КурьерID INT,
    РесторанID INT NOT NULL,
    ДатаЗаказа DATETIME DEFAULT GETDATE(),
    АдресДоставки NVARCHAR(255) NOT NULL,
    Статус NVARCHAR(20) DEFAULT 'Новый' CHECK (Статус IN ('Новый', 'Готовится', 'В пути', 'Доставлен', 'Отменен')),
    Сумма DECIMAL(10,2) NOT NULL CHECK (Сумма > 0),
    Оплачен BIT DEFAULT 0,
    FOREIGN KEY (КлиентID) REFERENCES Клиенты(КлиентID),
    FOREIGN KEY (КурьерID) REFERENCES Курьеры(КурьерID),
    FOREIGN KEY (РесторанID) REFERENCES Рестораны(РесторанID)
);
GO

-- Создание таблицы ЗаказыБлюда (промежуточная таблица для связи заказов и блюд)
CREATE TABLE ЗаказыБлюда (
    ЗаказБлюдоID INT IDENTITY(1,1) PRIMARY KEY,
    ЗаказID INT NOT NULL,
    БлюдоID INT NOT NULL,
    Количество INT NOT NULL CHECK (Количество > 0),
    Цена DECIMAL(10,2) NOT NULL CHECK (Цена > 0),
    FOREIGN KEY (ЗаказID) REFERENCES Заказы(ЗаказID),
    FOREIGN KEY (БлюдоID) REFERENCES Блюда(БлюдоID)
);
GO

-- =============================================
-- ЗАПОЛНЕНИЕ ТЕСТОВЫМИ ДАННЫМИ
-- =============================================

-- Заполнение таблицы Рестораны
INSERT INTO Рестораны (Название, Адрес, Телефон, Рейтинг, Кухня, ВремяРаботы) VALUES
('Пицца Мафия', 'ул. Ленина, 10', '+7(495)123-45-67', 4.5, 'Итальянская', '10:00-23:00'),
('Суши Мастер', 'пр. Мира, 25', '+7(495)987-65-43', 4.7, 'Японская', '11:00-22:00'),
('Бургер Кинг', 'ул. Советская, 5', '+7(495)555-01-23', 4.2, 'Американская', '9:00-24:00'),
('Терасса', 'ул. Кирова, 15', '+7(495)777-88-88', 4.8, 'Европейская', '12:00-00:00'),
('Шаурма Хаус', 'ул. Пушкина, 7', '+7(495)111-22-33', 4.3, 'Восточная', '10:00-03:00');
GO

-- Заполнение таблицы Блюда
INSERT INTO Блюда (Название, Описание, Цена, Вес, РесторанID, Категория) VALUES
('Пепперони', 'Пицца с колбасой пепперони, сыром моцарелла и томатным соусом', 550.00, 500, 1, 'Пицца'),
('Маргарита', 'Классическая пицца с томатным соусом, сыром моцарелла и базиликом', 450.00, 450, 1, 'Пицца'),
('Филадельфия', 'Роллы с лососем, сливочным сыром и огурцом', 490.00, 250, 2, 'Роллы'),
('Калифорния', 'Роллы с крабом, авокадо и огурцом', 450.00, 220, 2, 'Роллы'),
('Воппер', 'Бургер с котлетой, сыром, помидорами, огурцами, луком и соусом', 250.00, 300, 3, 'Бургеры'),
('Чизбургер', 'Бургер с котлетой и сыром', 200.00, 250, 3, 'Бургеры'),
('Цезарь', 'Салат с курицей, листьями салата, помидорами, сыром пармезан и соусом Цезарь', 350.00, 300, 4, 'Салаты'),
('Греческий', 'Салат с огурцами, помидорами, маслинами, сыром фета и оливковым маслом', 300.00, 250, 4, 'Салаты'),
('Шаурма с курицей', 'Лаваш с курицей, овощами и соусом', 180.00, 350, 5, 'Шаурма'),
('Шаурма с говядиной', 'Лаваш с говядиной, овощами и соусом', 200.00, 380, 5, 'Шаурма');
GO

-- Заполнение таблицы Клиенты
INSERT INTO Клиенты (Имя, Фамилия, Телефон, Email, Адрес) VALUES
('Алексей', 'Иванов', '+79151234567', 'alexey.ivanov@email.com', 'ул. Ленина, 10, кв. 5'),
('Мария', 'Петрова', '+79219876543', 'maria.petrova@email.com', 'пр. Мира, 25, кв. 12'),
('Дмитрий', 'Сидоров', '+79165550123', 'dmitry.sidorov@email.com', 'ул. Советская, 5, кв. 8'),
('Анна', 'Козлова', '+74957778888', 'anna.kozlova@email.com', 'ул. Кирова, 15, кв. 3'),
('Сергей', 'Смирнов', '+79031112222', 'sergey.smirnov@email.com', 'ул. Пушкина, 7, кв. 14'),
('Ольга', 'Васильева', '+79263334444', 'olga.vasilyeva@email.com', 'ул. Горького, 12, кв. 7'),
('Игорь', 'Новиков', '+79115556666', 'igor.novikov@email.com', 'ул. Маяковского, 18, кв. 21'),
('Екатерина', 'Кузнецова', '+79057770000', 'ekaterina.kuznetsova@email.com', 'ул. Чехова, 25, кв. 15');
GO

-- Заполнение таблицы Курьеры
INSERT INTO Курьеры (Имя, Фамилия, Телефон, Транспорт, Статус, Рейтинг) VALUES
('Иван', 'Петров', '+79151112233', 'Велосипед', 'Свободен', 4.7),
('Анна', 'Сидорова', '+79213334455', 'Автомобиль', 'Свободен', 4.9),
('Петр', 'Иванов', '+79167778899', 'Скутер', 'На смене', 4.5),
('Мария', 'Кузнецова', '+74959990011', 'Автомобиль', 'Свободен', 4.8),
('Сергей', 'Васильев', '+79032223344', 'Велосипед', 'Занят', 4.6);
GO

-- Заполнение таблицы Заказы
INSERT INTO Заказы (КлиентID, КурьерID, РесторанID, ДатаЗаказа, АдресДоставки, Статус, Сумма, Оплачен) VALUES
(1, 1, 1, '2023-10-15 18:30:00', 'ул. Ленина, 10, кв. 5', 'Доставлен', 1000.00, 1),
(2, 2, 2, '2023-10-16 19:15:00', 'пр. Мира, 25, кв. 12', 'Доставлен', 940.00, 1),
(3, 3, 3, '2023-10-17 20:00:00', 'ул. Советская, 5, кв. 8', 'Доставлен', 500.00, 1),
(1, 4, 4, '2023-10-18 12:45:00', 'ул. Ленина, 10, кв. 5', 'Доставлен', 650.00, 1),
(4, 5, 5, '2023-10-19 15:20:00', 'ул. Кирова, 15, кв. 3', 'В пути', 380.00, 1),
(5, 1, 1, '2023-10-20 17:50:00', 'ул. Пушкина, 7, кв. 14', 'Готовится', 1100.00, 0),
(6, 2, 2, '2023-10-21 13:10:00', 'ул. Горького, 12, кв. 7', 'Новый', 900.00, 0),
(7, 3, 3, '2023-10-22 18:25:00', 'ул. Маяковского, 18, кв. 21', 'Новый', 450.00, 0);
GO

-- Заполнение таблицы ЗаказыБлюда
INSERT INTO ЗаказыБлюда (ЗаказID, БлюдоID, Количество, Цена) VALUES
(1, 1, 1, 550.00),
(1, 2, 1, 450.00),
(2, 3, 2, 490.00),
(2, 4, 1, 450.00),
(3, 5, 2, 250.00),
(3, 6, 1, 200.00),
(4, 7, 1, 350.00),
(4, 8, 1, 300.00),
(5, 9, 1, 180.00),
(5, 10, 1, 200.00),
(6, 1, 2, 550.00),
(7, 5, 1, 250.00),
(7, 6, 1, 200.00);
GO

-- =============================================
-- ЭТАП 1: БАЗОВЫЕ ЗАДАНИЯ (INNER JOIN)
-- =============================================
-- Задание 1.1: Вывести список блюд с названиями ресторанов
SELECT б.Название AS Блюдо, р.Название AS Ресторан, б.Цена, б.Категория
FROM Блюда б
INNER JOIN Рестораны р ON б.РесторанID = р.РесторанID;
GO

-- Задание 1.2: Показать заказы с информацией о клиентах
SELECT з.ЗаказID, к.Имя + ' ' + к.Фамилия AS Клиент, з.ДатаЗаказа, з.Сумма, з.Статус
FROM Заказы з
INNER JOIN Клиенты к ON з.КлиентID = к.КлиентID;
GO

-- Задание 1.3: Вывести заказы с информацией о курьерах
SELECT з.ЗаказID, к.Имя + ' ' + к.Фамилия AS Курьер, з.Статус, з.АдресДоставки
FROM Заказы з
INNER JOIN Курьеры к ON з.КурьерID = к.КурьерID;
GO

-- =============================================
-- ЭТАП 2: LEFT JOIN ЗАДАНИЯ
-- =============================================
-- Задание 2.1: Показать все рестораны и количество блюд в каждом
SELECT р.Название AS Ресторан, COUNT(б.БлюдоID) AS КоличествоБлюд
FROM Рестораны р
LEFT JOIN Блюда б ON р.РесторанID = б.РесторанID
GROUP BY р.РесторанID, р.Название;
GO

-- Задание 2.2: Вывести всех курьеров и их заказы (включая курьеров без заказов)
SELECT к.Имя + ' ' + к.Фамилия AS Курьер, к.Транспорт, к.Рейтинг, COUNT(з.ЗаказID) AS КоличествоЗаказов
FROM Курьеры к
LEFT JOIN Заказы з ON к.КурьерID = з.КурьерID
GROUP BY к.КурьерID, к.Имя, к.Фамилия, к.Транспорт, к.Рейтинг;
GO

-- =============================================
-- ЭТАП 3: RIGHT JOIN ЗАДАНИЯ
-- =============================================
-- Задание 3.1: Показать все блюда и заказы, в которых они встречаются (включая блюда, которые не заказывали)
SELECT б.Название AS Блюдо, з.ЗаказID, зб.Количество
FROM Блюда б
LEFT JOIN ЗаказыБлюда зб ON б.БлюдоID = зб.БлюдоID
LEFT JOIN Заказы з ON зб.ЗаказID = з.ЗаказID
ORDER BY б.Название;
GO

-- =============================================
-- ЭТАП 4: FULL OUTER JOIN ЗАДАНИЯ
-- =============================================
-- Задание 4.1: Полное соединение ресторанов и кухонь
SELECT COALESCE(р.Название, 'Нет ресторана') AS Ресторан, COALESCE(р.Кухня, 'Нет кухни') AS Кухня
FROM Рестораны р
FULL OUTER JOIN (SELECT DISTINCT Кухня FROM Рестораны) к ON р.Кухня = к.Кухня;
GO

-- =============================================
-- ЭТАП 5: МНОЖЕСТВЕННЫЕ JOIN
-- =============================================
-- Задание 5.1: Полная информация о заказах
SELECT
    з.ЗаказID,
    к.Имя + ' ' + к.Фамилия AS Клиент,
    р.Название AS Ресторан,
    кур.Имя + ' ' + кур.Фамилия AS Курьер,
    з.ДатаЗаказа,
    з.Статус,
    з.Сумма,
    б.Название AS Блюдо,
    зб.Количество,
    зб.Цена
FROM Заказы з
INNER JOIN Клиенты к ON з.КлиентID = к.КлиентID
INNER JOIN Рестораны р ON з.РесторанID = р.РесторанID
LEFT JOIN Курьеры кур ON з.КурьерID = кур.КурьерID
INNER JOIN ЗаказыБлюда зб ON з.ЗаказID = зб.ЗаказID
INNER JOIN Блюда б ON зб.БлюдоID = б.БлюдоID
ORDER BY з.ЗаказID, б.Название;
GO

-- Задание 5.2: Топ-5 самых популярных блюд
SELECT TOP 5
    б.Название AS Блюдо,
    р.Название AS Ресторан,
    SUM(зб.Количество) AS ВсегоЗаказано,
    SUM(зб.Количество * зб.Цена) AS ОбщаяСумма
FROM Блюда б
INNER JOIN Рестораны р ON б.РесторанID = р.РесторанID
INNER JOIN ЗаказыБлюда зб ON б.БлюдоID = зб.БлюдоID
GROUP BY б.БлюдоID, б.Название, р.Название
ORDER BY ВсегоЗаказано DESC;
GO

-- =============================================
-- ЭТАП 6: САМОСОЕДИНЕНИЕ (SELF JOIN)
-- =============================================
-- Задание 6.1: Найти клиентов, которые заказывали в одних и тех же ресторанах
SELECT DISTINCT
    к1.Имя + ' ' + к1.Фамилия AS Клиент1,
    к2.Имя + ' ' + к2.Фамилия AS Клиент2,
    р.Название AS Ресторан
FROM Заказы з1
INNER JOIN Клиенты к1 ON з1.КлиентID = к1.КлиентID
INNER JOIN Заказы з2 ON з1.РесторанID = з2.РесторанID
INNER JOIN Клиенты к2 ON з2.КлиентID = к2.КлиентID
INNER JOIN Рестораны р ON з1.РесторанID = р.РесторанID
WHERE к1.КлиентID < к2.КлиентID
ORDER BY р.Название, Клиент1;
GO

-- =============================================
-- ЭТАП 7: АГРЕГАТНЫЕ ФУНКЦИИ С JOIN
-- =============================================
-- Задание 7.1: Статистика по ресторанам
SELECT
    р.Название AS Ресторан,
    COUNT(DISTINCT з.ЗаказID) AS КоличествоЗаказов,
    SUM(з.Сумма) AS ОбщаяВыручка,
    AVG(з.Сумма) AS СреднийЧек
FROM Рестораны р
LEFT JOIN Заказы з ON р.РесторанID = з.РесторанID
GROUP BY р.РесторанID, р.Название
ORDER BY ОбщаяВыручка DESC;
GO

-- Задание 7.2: Анализ заказов по дням недели
SELECT
    DATENAME(WEEKDAY, з.ДатаЗаказа) AS ДеньНедели,
    COUNT(з.ЗаказID) AS КоличествоЗаказов,
    SUM(з.Сумма) AS ОбщаяСумма,
    AVG(з.Сумма) AS СреднийЧек
FROM Заказы з
GROUP BY DATENAME(WEEKDAY, з.ДатаЗаказа)
ORDER BY COUNT(з.ЗаказID) DESC;
GO
