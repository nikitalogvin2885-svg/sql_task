USE master;
GO

-- Создание базы данных для учебного заведения
IF DB_ID('UniversityDB') IS NULL
    CREATE DATABASE UniversityDB;
GO

USE UniversityDB;
GO

-- Удаление существующих таблиц, если они есть
IF OBJECT_ID('Оценки', 'U') IS NOT NULL DROP TABLE Оценки;
IF OBJECT_ID('ПредметыПреподаватели', 'U') IS NOT NULL DROP TABLE ПредметыПреподаватели;
IF OBJECT_ID('Предметы', 'U') IS NOT NULL DROP TABLE Предметы;
IF OBJECT_ID('Преподаватели', 'U') IS NOT NULL DROP TABLE Преподаватели;
IF OBJECT_ID('Студенты', 'U') IS NOT NULL DROP TABLE Студенты;
IF OBJECT_ID('Группы', 'U') IS NOT NULL DROP TABLE Группы;
GO

-- Создание таблицы Группы
CREATE TABLE Группы (
    ГруппаID INT IDENTITY(1,1) PRIMARY KEY,
    НазваниеГруппы NVARCHAR(20) NOT NULL,
    Факультет NVARCHAR(100) NOT NULL,
    Курс INT NOT NULL CHECK (Курс BETWEEN 1 AND 6),
    ГодПоступления INT NOT NULL
);
GO

-- Создание таблицы Студенты
CREATE TABLE Студенты (
    СтудентID INT IDENTITY(1,1) PRIMARY KEY,
    Фамилия NVARCHAR(50) NOT NULL,
    Имя NVARCHAR(50) NOT NULL,
    Отчество NVARCHAR(50),
    ДатаРождения DATE NOT NULL,
    Пол NVARCHAR(1) CHECK (Пол IN ('М', 'Ж')),
    ГруппаID INT NOT NULL,
    Телефон NVARCHAR(20),
    Email NVARCHAR(100) UNIQUE NOT NULL,
    FOREIGN KEY (ГруппаID) REFERENCES Группы(ГруппаID)
);
GO

-- Создание таблицы Преподаватели
CREATE TABLE Преподаватели (
    ПреподавательID INT IDENTITY(1,1) PRIMARY KEY,
    Фамилия NVARCHAR(50) NOT NULL,
    Имя NVARCHAR(50) NOT NULL,
    Отчество NVARCHAR(50),
    ДатаРождения DATE NOT NULL,
    Пол NVARCHAR(1) CHECK (Пол IN ('М', 'Ж')),
    Должность NVARCHAR(100) NOT NULL,
    Кафедра NVARCHAR(100) NOT NULL,
    Телефон NVARCHAR(20),
    Email NVARCHAR(100) UNIQUE NOT NULL
);
GO

-- Создание таблицы Предметы
CREATE TABLE Предметы (
    ПредметID INT IDENTITY(1,1) PRIMARY KEY,
    Название NVARCHAR(100) NOT NULL,
    Описание NVARCHAR(500),
    КоличествоЧасов INT NOT NULL,
    Семестр INT NOT NULL CHECK (Семестр BETWEEN 1 AND 12)
);
GO

-- Создание таблицы для связи Предметы-Преподаватели
CREATE TABLE ПредметыПреподаватели (
    ПредметПреподавательID INT IDENTITY(1,1) PRIMARY KEY,
    ПредметID INT NOT NULL,
    ПреподавательID INT NOT NULL,
    FOREIGN KEY (ПредметID) REFERENCES Предметы(ПредметID),
    FOREIGN KEY (ПреподавательID) REFERENCES Преподаватели(ПреподавательID)
);
GO

-- Создание таблицы Оценки
CREATE TABLE Оценки (
    ОценкаID INT IDENTITY(1,1) PRIMARY KEY,
    СтудентID INT NOT NULL,
    ПредметID INT NOT NULL,
    ПреподавательID INT NOT NULL,
    Оценка INT NOT NULL CHECK (Оценка BETWEEN 2 AND 5),
    ДатаПостановки DATE NOT NULL,
    ТипКонтроля NVARCHAR(50) NOT NULL,
    FOREIGN KEY (СтудентID) REFERENCES Студенты(СтудентID),
    FOREIGN KEY (ПредметID) REFERENCES Предметы(ПредметID),
    FOREIGN KEY (ПреподавательID) REFERENCES Преподаватели(ПреподавательID)
);
GO

-- =============================================
-- ЗАПОЛНЕНИЕ ТЕСТОВЫМИ ДАННЫМИ
-- =============================================

-- Заполнение таблицы Группы
INSERT INTO Группы (НазваниеГруппы, Факультет, Курс, ГодПоступления) VALUES
('ИВТ-101', 'Информационных технологий', 1, 2023),
('ИВТ-201', 'Информационных технологий', 2, 2022),
('ИВТ-301', 'Информационных технологий', 3, 2021),
('МЕН-101', 'Менеджмента', 1, 2023),
('МЕН-201', 'Менеджмента', 2, 2022);
GO

-- Заполнение таблицы Студенты
INSERT INTO Студенты (Фамилия, Имя, Отчество, ДатаРождения, Пол, ГруппаID, Телефон, Email) VALUES
('Иванов', 'Алексей', 'Сергеевич', '2004-05-15', 'М', 1, '+79151234567', 'alexey.ivanov@university.edu'),
('Петрова', 'Мария', 'Александровна', '2003-08-22', 'Ж', 1, '+79219876543', 'maria.petrova@university.edu'),
('Сидоров', 'Дмитрий', 'Владимирович', '2004-03-10', 'М', 2, '+79165550123', 'dmitry.sidorov@university.edu'),
('Козлова', 'Анна', 'Ивановна', '2003-11-30', 'Ж', 2, '+74957778888', 'anna.kozlova@university.edu'),
('Смирнов', 'Сергей', 'Андреевич', '2002-07-18', 'М', 3, '+79031112222', 'sergey.smirnov@university.edu'),
('Васильева', 'Ольга', 'Петровна', '2004-02-14', 'Ж', 3, '+79263334444', 'olga.vasilyeva@university.edu'),
('Новиков', 'Игорь', 'Викторович', '2003-09-05', 'М', 4, '+79115556666', 'igor.novikov@university.edu'),
('Кузнецова', 'Екатерина', 'Сергеевна', '2004-06-20', 'Ж', 4, '+79057770000', 'ekaterina.kuznetsova@university.edu'),
('Морозов', 'Андрей', 'Алексеевич', '2003-12-12', 'М', 5, '+79101231234', 'andrey.morozov@university.edu'),
('Соколова', 'Наталья', 'Игоревна', '2002-04-25', 'Ж', 5, '+79204564567', 'natalya.sokolova@university.edu');
GO

-- Заполнение таблицы Преподаватели
INSERT INTO Преподаватели (Фамилия, Имя, Отчество, ДатаРождения, Пол, Должность, Кафедра, Телефон, Email) VALUES
('Смирнов', 'Андрей', 'Иванович', '1975-03-15', 'М', 'Профессор', 'Информационных технологий', '+79151112233', 'andrey.smirnov@university.edu'),
('Кузнецова', 'Елена', 'Петровна', '1980-07-22', 'Ж', 'Доцент', 'Информационных технологий', '+79213334455', 'elena.kuznetsova@university.edu'),
('Иванова', 'Мария', 'Сергеевна', '1978-11-10', 'Ж', 'Старший преподаватель', 'Менеджмента', '+79167778899', 'maria.ivanova@university.edu'),
('Петров', 'Иван', 'Андреевич', '1970-05-30', 'М', 'Профессор', 'Менеджмента', '+74959990011', 'ivan.petrov@university.edu'),
('Васильев', 'Сергей', 'Викторович', '1985-09-05', 'М', 'Доцент', 'Информационных технологий', '+79032223344', 'sergey.vasilyev@university.edu');
GO

-- Заполнение таблицы Предметы
INSERT INTO Предметы (Название, Описание, КоличествоЧасов, Семестр) VALUES
('Программирование', 'Основы программирования на языке C#', 72, 1),
('Базы данных', 'Проектирование и администрирование баз данных', 72, 2),
('Алгоритмы и структуры данных', 'Изучение алгоритмов и структур данных', 72, 3),
('Операционные системы', 'Основы работы операционных систем', 72, 4),
('Менеджмент', 'Основы управления организацией', 72, 1),
('Маркетинг', 'Основы маркетинговой деятельности', 72, 2),
('Экономика', 'Основы экономической теории', 72, 3),
('Финансы', 'Основы финансового менеджмента', 72, 4);
GO

-- Заполнение таблицы ПредметыПреподаватели
INSERT INTO ПредметыПреподаватели (ПредметID, ПреподавательID) VALUES
(1, 1), -- Программирование - Смирнов А.И.
(2, 2), -- Базы данных - Кузнецова Е.П.
(3, 1), -- Алгоритмы и структуры данных - Смирнов А.И.
(4, 5), -- Операционные системы - Васильев С.В.
(5, 3), -- Менеджмент - Иванова М.С.
(6, 4), -- Маркетинг - Петров И.А.
(7, 3), -- Экономика - Иванова М.С.
(8, 4); -- Финансы - Петров И.А.
GO

-- Заполнение таблицы Оценки
INSERT INTO Оценки (СтудентID, ПредметID, ПреподавательID, Оценка, ДатаПостановки, ТипКонтроля) VALUES
(1, 1, 1, 5, '2023-12-20', 'Экзамен'),
(1, 2, 2, 4, '2024-01-15', 'Зачет'),
(2, 1, 1, 4, '2023-12-20', 'Экзамен'),
(2, 5, 3, 5, '2023-12-15', 'Экзамен'),
(3, 2, 2, 5, '2024-01-15', 'Зачет'),
(3, 3, 1, 4, '2024-01-20', 'Экзамен'),
(4, 5, 3, 4, '2023-12-15', 'Экзамен'),
(4, 6, 4, 5, '2024-01-10', 'Зачет'),
(5, 3, 1, 5, '2024-01-20', 'Экзамен'),
(5, 4, 5, 4, '2024-01-25', 'Зачет'),
(6, 2, 2, 3, '2024-01-15', 'Зачет'),
(6, 7, 3, 4, '2024-01-22', 'Экзамен'),
(7, 5, 3, 5, '2023-12-15', 'Экзамен'),
(7, 6, 4, 4, '2024-01-10', 'Зачет'),
(8, 7, 3, 5, '2024-01-22', 'Экзамен'),
(8, 8, 4, 4, '2024-01-28', 'Зачет'),
(9, 1, 1, 4, '2023-12-20', 'Экзамен'),
(9, 4, 5, 5, '2024-01-25', 'Зачет'),
(10, 3, 1, 5, '2024-01-20', 'Экзамен'),
(10, 8, 4, 5, '2024-01-28', 'Зачет');
GO

-- =============================================
-- ЭТАП 1: БАЗОВЫЕ ЗАДАНИЯ (INNER JOIN)
-- =============================================
-- Задание 1.1: Вывести список студентов с названиями их групп
SELECT s.Фамилия, s.Имя, s.Отчество, g.НазваниеГруппы, g.Факультет
FROM Студенты s
INNER JOIN Группы g ON s.ГруппаID = g.ГруппаID;
GO

-- Задание 1.2: Показать предметы с информацией о преподавателях
SELECT p.Название AS Предмет, пр.Фамилия + ' ' + LEFT(пр.Имя, 1) + '. ' + LEFT(пр.Отчество, 1) + '.' AS Преподаватель
FROM Предметы p
INNER JOIN ПредметыПреподаватели pp ON p.ПредметID = pp.ПредметID
INNER JOIN Преподаватели пр ON pp.ПреподавательID = пр.ПреподавательID;
GO

-- Задание 1.3: Вывести оценки студентов с информацией о предметах
SELECT s.Фамилия + ' ' + LEFT(s.Имя, 1) + '. ' + LEFT(s.Отчество, 1) + '.' AS Студент,
       p.Название AS Предмет,
       о.Оценка,
       о.ТипКонтроля,
       о.ДатаПостановки
FROM Оценки о
INNER JOIN Студенты s ON о.СтудентID = s.СтудентID
INNER JOIN Предметы p ON о.ПредметID = p.ПредметID;
GO

-- =============================================
-- ЭТАП 2: LEFT JOIN ЗАДАНИЯ
-- =============================================
-- Задание 2.1: Показать всех преподавателей и предметы, которые они ведут (включая преподавателей без предметов)
SELECT пр.Фамилия + ' ' + LEFT(пр.Имя, 1) + '. ' + LEFT(пр.Отчество, 1) + '.' AS Преподаватель,
       p.Название AS Предмет
FROM Преподаватели пр
LEFT JOIN ПредметыПреподаватели pp ON пр.ПреподавательID = pp.ПреподавательID
LEFT JOIN Предметы p ON pp.ПредметID = p.ПредметID
ORDER BY пр.Фамилия;
GO

-- Задание 2.2: Вывести всех студентов и их оценки (включая студентов без оценок)
SELECT s.Фамилия + ' ' + LEFT(s.Имя, 1) + '. ' + LEFT(s.Отчество, 1) + '.' AS Студент,
       о.Оценка,
       p.Название AS Предмет,
       о.ТипКонтроля
FROM Студенты s
LEFT JOIN Оценки о ON s.СтудентID = о.СтудентID
LEFT JOIN Предметы p ON о.ПредметID = p.ПредметID
ORDER BY s.Фамилия;
GO

-- =============================================
-- ЭТАП 3: RIGHT JOIN ЗАДАНИЯ
-- =============================================
-- Задание 3.1: Показать все предметы и преподавателей, которые их ведут (включая предметы без преподавателей)
SELECT p.Название AS Предмет,
       пр.Фамилия + ' ' + LEFT(пр.Имя, 1) + '. ' + LEFT(пр.Отчество, 1) + '.' AS Преподаватель
FROM Предметы p
LEFT JOIN ПредметыПреподаватели pp ON p.ПредметID = pp.ПредметID
LEFT JOIN Преподаватели пр ON pp.ПреподавательID = пр.ПреподавательID
ORDER BY p.Название;
GO

-- =============================================
-- ЭТАП 4: FULL OUTER JOIN ЗАДАНИЯ
-- =============================================
-- Задание 4.1: Полное соединение студентов и групп
SELECT COALESCE(s.Фамилия + ' ' + LEFT(s.Имя, 1) + '.', 'Нет студента') AS Студент,
       COALESCE(g.НазваниеГруппы, 'Нет группы') AS Группа
FROM Студенты s
FULL OUTER JOIN Группы g ON s.ГруппаID = g.ГруппаID
ORDER BY Группа, Студент;
GO

-- =============================================
-- ЭТАП 5: МНОЖЕСТВЕННЫЕ JOIN
-- =============================================
-- Задание 5.1: Полная информация об оценках студентов
SELECT
    s.Фамилия + ' ' + LEFT(s.Имя, 1) + '. ' + LEFT(s.Отчество, 1) + '.' AS Студент,
    g.НазваниеГруппы AS Группа,
    p.Название AS Предмет,
    пр.Фамилия + ' ' + LEFT(пр.Имя, 1) + '. ' + LEFT(пр.Отчество, 1) + '.' AS Преподаватель,
    о.Оценка,
    о.ТипКонтроля,
    о.ДатаПостановки
FROM Оценки о
INNER JOIN Студенты s ON о.СтудентID = s.СтудентID
INNER JOIN Группы g ON s.ГруппаID = g.ГруппаID
INNER JOIN Предметы p ON о.ПредметID = p.ПредметID
INNER JOIN Преподаватели пр ON о.ПреподавательID = пр.ПреподавательID
ORDER BY s.Фамилия, о.ДатаПостановки DESC;
GO

-- Задание 5.2: Топ-5 студентов по среднему баллу
SELECT TOP 5
    s.Фамилия + ' ' + LEFT(s.Имя, 1) + '. ' + LEFT(s.Отчество, 1) + '.' AS Студент,
    g.НазваниеГруппы AS Группа,
    AVG(CAST(о.Оценка AS FLOAT)) AS СреднийБалл
FROM Студенты s
INNER JOIN Группы g ON s.ГруппаID = g.ГруппаID
LEFT JOIN Оценки о ON s.СтудентID = о.СтудентID
GROUP BY s.СтудентID, s.Фамилия, s.Имя, s.Отчество, g.НазваниеГруппы
HAVING COUNT(о.ОценкаID) > 0
ORDER BY СреднийБалл DESC;
GO

-- =============================================
-- ЭТАП 6: САМОСОЕДИНЕНИЕ (SELF JOIN)
-- =============================================
-- Задание 6.1: Найти студентов из одной группы
SELECT
    s1.Фамилия + ' ' + LEFT(s1.Имя, 1) + '. ' + LEFT(s1.Отчество, 1) + '.' AS Студент1,
    s2.Фамилия + ' ' + LEFT(s2.Имя, 1) + '. ' + LEFT(s2.Отчество, 1) + '.' AS Студент2,
    g.НазваниеГруппы AS Группа
FROM Студенты s1
INNER JOIN Студенты s2 ON s1.ГруппаID = s2.ГруппаID AND s1.СтудентID < s2.СтудентID
INNER JOIN Группы g ON s1.ГруппаID = g.ГруппаID
ORDER BY g.НазваниеГруппы, s1.Фамилия;
GO

-- =============================================
-- ЭТАП 7: АГРЕГАТНЫЕ ФУНКЦИИ С JOIN
-- =============================================
-- Задание 7.1: Статистика по успеваемости студентов в разрезе предметов
SELECT
    p.Название AS Предмет,
    COUNT(DISTINCT о.СтудентID) AS КоличествоСтудентов,
    AVG(CAST(о.Оценка AS FLOAT)) AS СреднийБалл,
    MIN(о.Оценка) AS МинимальнаяОценка,
    MAX(о.Оценка) AS МаксимальнаяОценка
FROM Предметы p
LEFT JOIN Оценки о ON p.ПредметID = о.ПредметID
GROUP BY p.ПредметID, p.Название
ORDER BY СреднийБалл DESC;
GO

-- Задание 7.2: Анализ успеваемости по факультетам
SELECT
    g.Факультет,
    COUNT(DISTINCT s.СтудентID) AS КоличествоСтудентов,
    AVG(CAST(о.Оценка AS FLOAT)) AS СреднийБалл,
    COUNT(о.ОценкаID) AS КоличествоОценок
FROM Группы g
INNER JOIN Студенты s ON g.ГруппаID = s.ГруппаID
LEFT JOIN Оценки о ON s.СтудентID = о.СтудентID
GROUP BY g.Факультет
ORDER BY СреднийБалл DESC;
GO
